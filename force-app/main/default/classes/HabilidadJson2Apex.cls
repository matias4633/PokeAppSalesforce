//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//

public class HabilidadJson2Apex {

	public class Names {
		public Language language {get;set;} 
		public String name {get;set;} 

		public Names(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'language') {
							language = new Language(parser);
						} else if (text == 'name') {
							name = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Names consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Flavor_text_entries {
		public String flavor_text {get;set;} 
		public Language language {get;set;} 
		public Language version_group {get;set;} 

		public Flavor_text_entries(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'flavor_text') {
							flavor_text = parser.getText();
						} else if (text == 'language') {
							language = new Language(parser);
						} else if (text == 'version_group') {
							version_group = new Language(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Flavor_text_entries consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Language {
		public String name {get;set;} 
		public String url {get;set;} 

		public Language(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'url') {
							url = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Language consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Effect_changes {

		public Effect_changes(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'Effect_changes consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Effect_entries {
		public String effect {get;set;} 
		public Language language {get;set;} 
		public String short_effect {get;set;} 

		public Effect_entries(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'effect') {
							effect = parser.getText();
						} else if (text == 'language') {
							language = new Language(parser);
						} else if (text == 'short_effect') {
							short_effect = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Effect_entries consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Pokemon {
		public Boolean is_hidden {get;set;} 
		public Language pokemon {get;set;} 
		public Integer slot {get;set;} 

		public Pokemon(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'is_hidden') {
							is_hidden = parser.getBooleanValue();
						} else if (text == 'pokemon') {
							pokemon = new Language(parser);
						} else if (text == 'slot') {
							slot = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Pokemon consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public List<Effect_changes> effect_changes {get;set;} 
	public List<Effect_entries> effect_entries {get;set;} 
	public List<Flavor_text_entries> flavor_text_entries {get;set;} 
	public Language generation {get;set;} 
	public Integer id {get;set;} 
	public Boolean is_main_series {get;set;} 
	public String name {get;set;} 
	public List<Names> names {get;set;} 
	public List<Pokemon> pokemon {get;set;} 

	public HabilidadJson2Apex(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'effect_changes') {
						effect_changes = arrayOfEffect_changes(parser);
					} else if (text == 'effect_entries') {
						effect_entries = arrayOfEffect_entries(parser);
					} else if (text == 'flavor_text_entries') {
						flavor_text_entries = arrayOfFlavor_text_entries(parser);
					} else if (text == 'generation') {
						generation = new Language(parser);
					} else if (text == 'id') {
						id = parser.getIntegerValue();
					} else if (text == 'is_main_series') {
						is_main_series = parser.getBooleanValue();
					} else if (text == 'name') {
						name = parser.getText();
					} else if (text == 'names') {
						names = arrayOfNames(parser);
					} else if (text == 'pokemon') {
						pokemon = arrayOfPokemon(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'HabilidadJson2Apex consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	
	public static HabilidadJson2Apex parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new HabilidadJson2Apex(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	
    private static List<Effect_changes> arrayOfEffect_changes(System.JSONParser p) {
        List<Effect_changes> res = new List<Effect_changes>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Effect_changes(p));
        }
        return res;
    }


    private static List<Pokemon> arrayOfPokemon(System.JSONParser p) {
        List<Pokemon> res = new List<Pokemon>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Pokemon(p));
        }
        return res;
    }






    private static List<Names> arrayOfNames(System.JSONParser p) {
        List<Names> res = new List<Names>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Names(p));
        }
        return res;
    }






    private static List<Effect_entries> arrayOfEffect_entries(System.JSONParser p) {
        List<Effect_entries> res = new List<Effect_entries>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Effect_entries(p));
        }
        return res;
    }


    private static List<Flavor_text_entries> arrayOfFlavor_text_entries(System.JSONParser p) {
        List<Flavor_text_entries> res = new List<Flavor_text_entries>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Flavor_text_entries(p));
        }
        return res;
    }




}